@model ITO_TicketManagementSystem.Models.ViewModels.TicketCreationVM
@{
    ViewData["Title"] = "Create Ticket";
}
<a href="javascript:history.back()" class="btn btn-secondary mb-3">
    ← Back
</a>

<div class="container py-5">
    <div class="row justify-content-center">
        <div class="col-lg-8">
            <div class="card shadow-sm">
                <div class="card-header bg-primary text-white">
                    <h3 class="mb-0">Raise A Ticket</h3>
                </div>
                <div class="card-body">
                    <form asp-controller="Ticket" asp-action="Create" method="post" enctype="multipart/form-data">
                        @Html.AntiForgeryToken()

                        <!-- Show BOTH model-level and field-level errors -->
                        <div asp-validation-summary="All" class="alert alert-danger"></div>

                        <!-- Keep default "New" unless changed later -->
                        <input type="hidden" asp-for="Status" value="New" />

                        <div class="mb-4">
                            <label asp-for="Title" class="form-label fw-bold"></label>
                            <input asp-for="Title" class="form-control form-control-lg" placeholder="Enter ticket title" />
                            <span asp-validation-for="Title" class="text-danger small"></span>
                        </div>

                        <div class="mb-4">
                            <label asp-for="Description" class="form-label fw-bold"></label>
                            <textarea asp-for="Description" class="form-control" rows="5" placeholder="Describe your issue in detail"></textarea>
                            <span asp-validation-for="Description" class="text-danger small"></span>
                        </div>

                        <div class="mb-4">
                            <label asp-for="AssignType" class="form-label fw-bold">Assign Type</label>
                            <select asp-for="AssignType" class="form-select">
                                <option value="" selected disabled>Select ticket type</option>
                                <option value="Hardware">Hardware</option>
                                <option value="Software">Software</option>
                                <option value="Network">Network</option>
                                <option value="Access">Access</option>
                                <option value="Other">Other</option>
                            </select>
                            <span asp-validation-for="AssignType" class="text-danger small"></span>
                        </div>

                        <!-- Attachment Section -->
                        <div class="mb-4 border rounded p-3">
                            <legend class="fw-bold mb-3">Attachment (optional)</legend>

                            <!-- OPTION 1: user pastes a URL/path string -->
                            <div class="mb-3">
                                <label asp-for="Attachment" class="form-label">Paste a URL or stored path</label>
                                <input asp-for="Attachment" class="form-control" placeholder="e.g. /uploads/abc.pdf or https://..." />
                                <span asp-validation-for="Attachment" class="text-danger small"></span>
                            </div>

                            <div class="text-center my-3">
                                <span class="text-muted">- OR -</span>
                            </div>

                            <!-- OPTION 2: user uploads a file -->
                            <div class="mb-2">
                                <label asp-for="AttachmentFile" class="form-label">Upload a file</label>
                                <input asp-for="AttachmentFile" type="file" class="form-control" accept=".png,.jpg,.jpeg,.pdf,.txt,.doc,.docx" />
                                <div class="form-text">Accepted formats: PNG, JPG, PDF, TXT, DOC. Max size: 5MB</div>
                                <span asp-validation-for="AttachmentFile" class="text-danger small"></span>
                            </div>

                            <div class="alert alert-info mt-3 mb-0">
                                <i class="bi bi-info-circle-fill"></i> If both are provided, the uploaded file will be saved and used.
                            </div>
                        </div>

                        <div class="d-grid gap-2 mt-4">
                            <button type="submit" class="btn btn-primary btn-lg">
                                <i class="bi bi-ticket-detailed"></i> Create Ticket
                            </button>
                            <a asp-controller="Ticket" asp-action="Index" class="btn btn-outline-secondary">
                                <i class="bi bi-arrow-left"></i> Cancel
                            </a>
                        </div>
                    </form>

                    <!-- Server-side fallback so you see errors even if JS isn't loaded -->
                    @if (!ViewData.ModelState.IsValid)
                    {
                        <div class="alert alert-danger mt-4">
                            <h5 class="alert-heading">Validation Errors</h5>
                            <ul class="mb-0">
                                @foreach (var kv in ViewData.ModelState)
                                {
                                    foreach (var err in kv.Value.Errors)
                                    {
                                        <li><strong>@(string.IsNullOrEmpty(kv.Key) ? "General" : kv.Key)</strong>: @err.ErrorMessage</li>
                                    }
                                }
                            </ul>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.8.0/font/bootstrap-icons.css" rel="stylesheet">
 
}


@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        // Enhance form validation UX
        document.addEventListener('DOMContentLoaded', function() {
            // Add was-validated class on form submission
            const form = document.querySelector('form');
            form.addEventListener('submit', function(event) {
                if (!form.checkValidity()) {
                    event.preventDefault();
                    event.stopPropagation();
                }
                form.classList.add('was-validated');
            }, false);

            // Clear validation when user starts typing
            const inputs = form.querySelectorAll('input, textarea, select');
            inputs.forEach(input => {
                input.addEventListener('input', function() {
                    this.classList.remove('is-invalid');
                    const errorElement = this.nextElementSibling;
                    if (errorElement && errorElement.classList.contains('text-danger')) {
                        errorElement.textContent = '';
                    }
                });
            });
        });
    </script>
}